{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flore\\\\Desktop\\\\TicketsSystem\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport io from \"socket.io-client\";\nimport { GoogleAuthProvider } from 'firebase/auth';\nimport { Auth, signInGoogle, Google } from \"./firebase\";\nimport ReactDOM from 'react-dom/client';\nimport App from './components/app/app';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet ClientID;\nconst Client = io(\"http://localhost:5000\");\nClient.on(\"socket-id\", _ref => {\n  let {\n    ID\n  } = _ref;\n  ClientID = ID;\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 13\n}, this));\nsignInGoogle(Auth, Google).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken; // The signed-in user info.\n\n  const user = result.user;\n  console.log(user);\n});\nexport default {\n  Client: Client,\n  CID: ClientID\n};","map":{"version":3,"names":["React","io","GoogleAuthProvider","Auth","signInGoogle","Google","ReactDOM","App","ClientID","Client","on","ID","root","createRoot","document","getElementById","render","then","result","credential","credentialFromResult","token","accessToken","user","console","log","CID"],"sources":["C:/Users/flore/Desktop/TicketsSystem/frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport io from \"socket.io-client\"\nimport { GoogleAuthProvider } from 'firebase/auth';\nimport {Auth, signInGoogle, Google} from \"./firebase\"\nimport ReactDOM from 'react-dom/client';\nimport App from './components/app/app';\nlet ClientID;\nconst Client = io(\"http://localhost:5000\")\nClient.on(\"socket-id\", ({ID}) => {\n  ClientID = ID\n})\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(<App />)\nsignInGoogle(Auth, Google,).then((result) => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken;\n  // The signed-in user info.\n  const user = result.user;\n  console.log(user)\n})\nexport default {Client: Client, CID: ClientID};\n\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAAQC,IAAR,EAAcC,YAAd,EAA4BC,MAA5B,QAAyC,YAAzC;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;;AACA,IAAIC,QAAJ;AACA,MAAMC,MAAM,GAAGR,EAAE,CAAC,uBAAD,CAAjB;AACAQ,MAAM,CAACC,EAAP,CAAU,WAAV,EAAuB,QAAU;EAAA,IAAT;IAACC;EAAD,CAAS;EAC/BH,QAAQ,GAAGG,EAAX;AACD,CAFD;AAIA,MAAMC,IAAI,GAAGN,QAAQ,CAACO,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eAAY,QAAC,GAAD;EAAA;EAAA;EAAA;AAAA,QAAZ;AACAZ,YAAY,CAACD,IAAD,EAAOE,MAAP,CAAZ,CAA4BY,IAA5B,CAAkCC,MAAD,IAAY;EAC3C;EACA,MAAMC,UAAU,GAAGjB,kBAAkB,CAACkB,oBAAnB,CAAwCF,MAAxC,CAAnB;EACA,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAH2C,CAI3C;;EACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB;EACAC,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,CAPD;AAQA,eAAe;EAACd,MAAM,EAAEA,MAAT;EAAiBiB,GAAG,EAAElB;AAAtB,CAAf"},"metadata":{},"sourceType":"module"}